PlatformCountNeeded = 52
bot = getBot()
bot.move_range = MovementSpeed
bot.collect_interval = 100
bot.auto_reconnect = true

-- Fungsi untuk mendapatkan interval acak
function randomInterval(min, max)
    return math.random(min, max)
end

-- Fungsi untuk memuat daftar dunia dari file teks
function loadWorldList(filename)
    local worldList = {}
    local file = io.open(filename, "r")
    if file then
        for line in file:lines() do
            table.insert(worldList, line)
        end
        file:close()
    else
        print("[ERROR] Tidak dapat membuka file: " .. filename)
    end
    return worldList
end

-- Fungsi untuk menyimpan world yang selesai dikerjakan
function saveWorldDone(world)
    local file = io.open(WORLDDONE_FILE, "a")
    if file then
        file:write(world .. "\n")
        file:close()
    else
        print("[ERROR] Tidak dapat membuka file WorldDone.txt")
    end
end

-- Fungsi untuk memperbarui file daftar world
function updateWorldList(filename, completedWorld)
    local lines = {}
    local file = io.open(filename, "r")
    if file then
        for line in file:lines() do
            if line ~= completedWorld then
                table.insert(lines, line)
            end
        end
        file:close()
    end

    file = io.open(filename, "w")
    if file then
        for _, line in ipairs(lines) do
            file:write(line .. "\n")
        end
        file:close()
    end
end

-- Fungsi untuk warp ke dunia dan pintu yang ditentukan
function warp(world, door)
    bot:warp(world, door)
    sleep(WarpDelay + randomInterval(MinDelay, MaxDelay))
end

-- Fungsi untuk mengambil pickaxe dan memastikan hanya menyimpan 1
function retrievePickaxe()
    warp(PickaxeStorageWorld, PickaxeStorageDoor)
    sleep(randomInterval(MinDelay, MaxDelay))

    local pickaxeCount = bot:getItemCount(PickaxeID)
    if pickaxeCount == 0 then
        for _, obj in pairs(bot:getObjects()) do
            if obj.id == PickaxeID then
                bot:findPath(math.floor(obj.x / 32), math.floor(obj.y / 32))
                bot:collect(obj.oid)
                sleep(randomInterval(MinDelay, MaxDelay))
            end
        end
    end

    while bot:getItemCount(PickaxeID) > 1 do
        bot:drop(PickaxeID, bot:getItemCount(PickaxeID) - 1)
        print("[INFO] Men-drop pickaxe tambahan, hanya menyimpan 1.")
        sleep(randomInterval(MinDelay, MaxDelay))
    end

    if bot:getItemCount(PickaxeID) == 1 then
        print("[INFO] Pickaxe berhasil diambil dan hanya 1 yang tersisa.")
    else
        print("[WARNING] Gagal mengatur jumlah pickaxe, periksa kembali!")
    end
end

-- Fungsi untuk mengambil platform dari world penyimpanan
function retrievePlatform()
    warp(PlatformStorageWorld, PlatformStorageDoor)
    sleep(randomInterval(MinDelay, MaxDelay))

    local platformCount = bot:getItemCount(PlatformID)
    if platformCount < PlatformCountNeeded then
        for _, obj in pairs(bot:getObjects()) do
            if obj.id == PlatformID then
                bot:findPath(math.floor(obj.x / 32), math.floor(obj.y / 32))
                bot:collect(obj.oid)
                sleep(randomInterval(MinDelay, MaxDelay))
            end
        end
    end

    while bot:getItemCount(PlatformID) > PlatformCountNeeded do
        bot:drop(PlatformID, bot:getItemCount(PlatformID) - PlatformCountNeeded)
        print("[INFO] Men-drop platform tambahan, menyimpan yang dibutuhkan saja.")
        sleep(randomInterval(MinDelay, MaxDelay))
    end

    if bot:getItemCount(PlatformID) >= PlatformCountNeeded then
        print("[INFO] Platform berhasil diambil.")
    else
        print("[WARNING] Gagal mengambil platform, periksa kembali!")
    end
end

-- Fungsi untuk menempatkan platform di sisi kiri dan kanan dari setiap baris
function placePlatformSides(world, door, botIndex)
    local startY, endY = getBotArea(botIndex)
    warp(world, door)

    for y = startY, endY, 2 do
        if getTile(1, y).fg == 0 then
            bot:findPath(1, y)
            bot:place(1, y, PlatformID)
            sleep(PlaceDelay + randomInterval(MinDelay, MaxDelay))
        end
        if getTile(22, y).fg == 0 then
            bot:findPath(22, y)
            bot:place(22, y, PlatformID)
            sleep(PlaceDelay + randomInterval(MinDelay, MaxDelay))
        end
    end
end

-- Fungsi untuk menentukan area kerja setiap bot
function getBotArea(botIndex)
    local totalRows = 53 - 25
    local rowsPerBot = math.floor(totalRows / BotsPerWorld)
    local startRow = 25 + (botIndex - 1) * rowsPerBot
    local endRow = startRow + rowsPerBot - 1
    return startRow, endRow
end

-- Fungsi untuk mengecek apakah tile bisa ditanami dirt
function isPlantable(x, y)
    local belowTile = getTile(x, y + 1)
    if belowTile and (belowTile.fg ~= 0) then
        return true
    end
    return false
end

-- Fungsi untuk membersihkan dunia berdasarkan area bot
function clearWorld(world, door, botIndex)
    local startY, endY = getBotArea(botIndex)
    warp(world, door)
    bot.auto_collect = true
    bot.collect_interval = 100
    for y = startY, endY, 2 do
        for x = 1, 99 do
            local tile = getTile(x, y)
            if tile.fg ~= 0 then
                if BreakRock and tile.fg == 10 then
                    break3Way(x, y)
                end

                if BreakLava and tile.fg == 4 then
                    break3Way(x, y)
                end

                break3Way(x, y)
            end
        end
    end
    trashItems()
end

-- Fungsi untuk menanam dirt di area bot
function plantDirt(world, door, botIndex)
    local startY, endY = getBotArea(botIndex)
    warp(world, door)
    for y = startY, endY, 2 do
        for x = 2, 22 do
            if getTile(x, y).fg == 0 and isPlantable(x, y) then
                bot:findPath(x, y)
                bot:place(x, y, 2)
                sleep(PlaceDelay + randomInterval(MinDelay, MaxDelay))
            end
        end
    end
    trashItems()
end

-- Fungsi untuk melakukan chat acak
function randomChat()
    local messages = {
        "Halo semua!",
        "Apa kabar?",
        "Sedang melakukan farming!",
        "Semoga hari kalian menyenangkan!",
        "Butuh bantuan di sini!",
        "Ada yang ingin diajukan?",
        "Farming sambil ngobrol!",
        "Selamat bermain!"
    }

    local randomIndex = math.random(1, #messages)
    bot:chat(messages[randomIndex])
    sleep(randomInterval(2000, 5000))  -- Delay acak setelah chat
end

-- Fungsi untuk memulai farming di world
function startFarming(worldInfo)
    local w, d = worldInfo:match("([^:]+):([^:]+)")
    if w and d then
        retrievePickaxe()
        retrievePlatform()

        print("Bot Username: " .. getUsername() .. " - Memulai proses di dunia " .. w .. " pada pintu " .. d)

        for botIndex = 1, BotsPerWorld do
            clearWorld(w, d, botIndex)
            placePlatformSides(w, d, botIndex)
            plantDirt(w, d, botIndex)

            -- Mengirim chat acak setelah setiap siklus
            randomChat()
        end

        saveWorldDone(worldInfo)
        updateWorldList(FARMFILE, worldInfo)
    else
        print("[ERROR] Format world dan door tidak valid: " .. worldInfo)
    end
end

-- Memuat daftar dunia dari file teks dan melakukan proses farming
ListWorld = loadWorldList(FARMFILE)
for _, worldInfo in pairs(ListWorld) do
    startFarming(worldInfo)
end

print("[INFO] Proses selesai.")
